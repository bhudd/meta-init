#!/usr/bin/env node

const fs = require('fs');
const debug = require('debug')('meta-init');
const getMetaFile = require('get-meta-file');
const maybeImportFromGitSlave = require('../lib/maybeImportFromGitSlave');
const path = require('path');
const util = require('util');

if (process.argv[2] === '--help') {
  return console.log(`\n  usage:\n\n    meta init\n`);
}

let force = false;

if (process.argv[2] === '--force') {
  force = true;
}

var meta = getMetaFile({ warn: false });

if (meta && ! force) return console.error(`A .meta file already exists in ${process.cwd()}. User --force to overwrite.`);

const metaJson = JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'support', '.meta')).toString());

if (fs.existsSync('./.gitslave')) {

  maybeImportFromGitSlave(function (err, projectPairs) {
    if (err) throw err;

    for (let key in projectPairs) {
      metaJson.projects[key] = projectPairs[key];
      metaJson.branches[key] = 'master';
    }

    console.log(`creating a .meta file in ${process.cwd()} with contents \n${JSON.stringify(metaJson, null, '  ')}`);

    fs.writeFileSync(path.join(process.cwd(), '.meta'), JSON.stringify(metaJson, null, ' '));

  });

} else {

  console.log(`creating a .meta file in ${process.cwd()}`);

  fs.writeFileSync(path.join(process.cwd(), '.meta'), JSON.stringify(metaJson, null, ' '));

}